#
#                                Copyright (C) 2017 by Rafael Santiago
#
# This is a free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#

include ../Toolsets.hsl
include ~/fsutil.hsl
include ~/conv.hsl

local var toolset_name type string;

local var sources type list;
local var includes type list;
local var cflags type list;
local var libraries type list;
local var ldflags type list;

project kryptos-tests : toolset $toolset_name : $sources, $includes, $cflags, $libraries, $ldflags, "kryptos-tests";

kryptos-tests.preloading() {
    $toolset_name = get_app_toolset();
}

kryptos-tests.prologue() {
    var user_option type list;

    forge_cutest();

    $sources.ls(".*\\.c$");

    $includes = hefesto.sys.get_option("includes");

    $cflags = hefesto.sys.get_option("cflags");
    $user_option = hefesto.sys.get_option("no-hmac-tests");
    if ($user_option.count() > 0) {
        $cflags.add_item("-DKRYPTOS_NO_HMAC_TESTS");
    }

    if ($toolset_name.match("^clang") == 1) {
        $cflags.add_item("-Wno-pointer-sign");
        $cflags.add_item("-Wno-invalid-source-encoding");
    }

    $libraries = hefesto.sys.get_option("libraries");
    $ldflags = hefesto.sys.get_option("ldflags");

    if (hefesto.sys.os_name() == "freebsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "linux") {
        $ldflags.add_item("-ldl");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "openbsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "minix") {
        $ldflags.add_item("-lexecinfo");
    } else if (hefesto.sys.os_name() == "windows" && $cflags.index_of("-DNO_KRYPTOS_C99_SUPPORT")) {
        # INFO(Rafael): Let's enable c99 capabilities by default.
        $cflags.add_item("-std=c99");
    }

    if (isdir("/usr/local/include")) {
        $includes.add_item("/usr/local/include");
    }

    if (isdir("/usr/local/lib")) {
        $libraries.add_item("/usr/local/lib");
    }
}

kryptos-tests.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        var stress_tests type list;
        $stress_tests = hefesto.sys.get_option("stress-tests");

        var exit_code type int;
        if ($stress_tests.count() == 0) {
            $exit_code = hefesto.sys.run(hefesto.sys.make_path("bin", "kryptos-tests --cutest-leak-check " +
                                                                       hefesto.project.cmdline()));

            var kernel_mode_tests type list;
            $kernel_mode_tests = hefesto.sys.get_option("kernel-mode-tests");
            if ($kernel_mode_tests.count() > 0) {
                $exit_code = forge_kernel_mode_tests();
            }

            if ($exit_code != 0) {
                hefesto.sys.echo("~~~ TESTS FAILURE.\n");
                hefesto.project.abort($exit_code);
            }
        } else {
            var runnings_nr type list;
            $runnings_nr = hefesto.sys.get_option("runnings-nr");
            if ($runnings_nr.count() == 0) {
                hefesto.sys.echo("ERROR: Build ran with --stress-tests but without --runnings-nr option.\n");
                hefesto.project.abort(1);
            }
            var rmax type int;
            var sdata type string;

            $sdata = $runnings_nr.item(0);
            $rmax = str2int($sdata);

            if ($rmax <= 1) {
                hefesto.sys.echo("ERROR: Build ran with invalid data in --runnings-nr option. " +
                                 "It should be a valid integer > 1.\n");
                hefesto.project.abort(1);
            }

            var r type int;
            $r = 0;

            $exit_code = 0;

            while ($r < $rmax && $exit_code == 0) {
                $exit_code = hefesto.sys.run(hefesto.sys.make_path("bin", "kryptos-tests --cutest-leak-check " +
                                                                           hefesto.project.cmdline()));
                $r = $r + 1;
            }

            var status_msg type string;

            hefesto.sys.echo("*** STRESS TESTING INFO: ");

            if ($exit_code == 0) {
                $status_msg = "ALL RUNNINGS PASSED!\n";
                if (hefesto.sys.os_name() != "windows") {
                    $status_msg = "\x1B[32m" + $status_msg + "\x1B[m";
                }
            } else {
                $status_msg = "ERROR DURING A TEST RUNNING!\n";
                if (hefesto.sys.os_name() != "windows") {
                    $status_msg = "\x1B[31m" + $status_msg + "\x1B[m";
                }
            }

            hefesto.sys.echo($status_msg);

            if ($exit_code != 0) {
                hefesto.project.abort($exit_code);
            }
        }
    }
}

local function forge_cutest() : result type none {
    var oldcwd type string;

    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("cutest/src")) {
        hefesto.sys.forge("cutest",
                          "Forgefile.hsl", "--forgefiles=Forgefile.hsl --Forgefile-projects=cutest " +
                                            "--obj-output-dir=obj --bin-output-dir=lib " +
                                            "--toolset=" + get_lib_toolset());
        if (hefesto.sys.last_forge_result() != 0) {
            hefesto.sys.echo("~~~ UNABLE TO BUILD LIBCUTEST.\n");
            hefesto.project.abort(1);
        }
        hefesto.sys.cd($oldcwd);
    } else {
        hefesto.sys.echo("~~~ UNABLE TO BUILD LIBCUTEST.\n");
        hefesto.project.abort(1);
    }
}

local function forge_kernel_mode_tests() : result type int {
    var oldcwd type string;
    var exit_code type int;
    var supported_platforms type list;

    # INFO(Rafael): Add here the platforms where kernel mode stuff is
    #               supported.

    $supported_platforms.add_item("linux");
    $supported_platforms.add_item("freebsd");

    if ($supported_platforms.index_of(hefesto.sys.os_name()) == -1) {
        hefesto.sys.echo("ERROR: Kryptos kernel mode stuff not supported " +
                         "in this current platform.\n");
        result 1;
    }


    $oldcwd = hefesto.sys.pwd();
    $exit_code = 1;

    if (hefesto.sys.cd("kernel")) {
        $exit_code = hefesto.sys.forge("kryptos-test-mod",
                                       "Forgefile.hsl", "--forgefiles=Forgefile.hsl --Forgefile-projects=kryptos-test-mod " +
                                       hefesto.project.cmdline());
        hefesto.sys.cd($oldcwd);
    }

    result $exit_code;
}
