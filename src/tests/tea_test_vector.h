/*
 *                                Copyright (C) 2017 by Rafael Santiago
 *
 * This is a free software. You can redistribute it and/or modify under
 * the terms of the GNU General Public License version 2.
 *
 */
#ifndef KRYPTOS_TESTS_TEA_TEST_VECTOR_H
#define KRYPTOS_TESTS_TEA_TEST_VECTOR_H 1

#include "test_types.h"

test_vector(tea, block_cipher) = {
    add_test_vector_data("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                         16,
                         "\x00\x00\x00\x00\x00\x00\x00\x00",
                         "\x41\xEA\x3A\x0A\x94\xBA\xA9\x40",
                         "\x00\x00\x00\x00\x00\x00\x00\x00",
                         8),
    add_test_vector_data("\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF",
                         16,
                         "\x00\x01\x02\x03\x04\x05\x06\x07",
                         "\xBA\x66\x9E\xE8\x7C\xD2\x13\x10",
                         "\x00\x01\x02\x03\x04\x05\x06\x07",
                         8),
    add_test_vector_data("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                         16,
                         "\x00\x00\x00\x01\x00\x00\x00\x01",
                         "\xE0\x05\x0D\x07\x4F\xB5\x0C\x13",
                         "\x00\x00\x00\x01\x00\x00\x00\x01",
                         8),
    add_test_vector_data("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                         16,
                         "\x12\x34\x56\x78\x9A\xBC\xDE\xF0",
                         "\x7F\xE2\xE4\x80\x4F\x66\xBD\x75",
                         "\x12\x34\x56\x78\x9A\xBC\xDE\xF0",
                         8),
    add_test_vector_data("\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                         16,
                         "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF",
                         "\xF6\xF4\xBF\x6E\x13\x35\xB5\xB8",
                         "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF",
                         8),
    add_test_vector_data("\x12\x34\x56\x78\x9A\xBC\xDE\xF0\x12\x34\x56\x78\x9A\xBC\xDE\xF0",
                         16,
                         "\x00\x00\x00\x00\x00\x00\x00\x00",
                         "\xBC\xDA\x87\x37\x10\x24\xD3\x12",
                         "\x00\x00\x00\x00\x00\x00\x00\x00",
                         8),
    add_test_vector_data("\x12\x34\x56\x78\x9A\xBC\xDE\xF0\x12\x34\x56\x78\x9A\xBC\xDE\xF0",
                         16,
                         "\x00\x00\x00\x01\x00\x00\x00\x01",
                         "\x8A\xC7\x11\xA0\x75\xCF\xE5\x7E",
                         "\x00\x00\x00\x01\x00\x00\x00\x01",
                         8),
    add_test_vector_data("\x12\x34\x56\x78\x9A\xBC\xDE\xF0\x12\x34\x56\x78\x9A\xBC\xDE\xF0",
                         16,
                         "\x12\x34\x56\x78\x9A\xBC\xDE\xF0",
                         "\x03\xAD\xDB\x70\x5E\xAE\xA1\x94",
                         "\x12\x34\x56\x78\x9A\xBC\xDE\xF0",
                         8),
    add_test_vector_data("\x12\x34\x56\x78\x9A\xBC\xDE\xF0\x12\x34\x56\x78\x9A\xBC\xDE\xF0",
                         16,
                         "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF",
                         "\xEE\xFB\xE7\xFB\x70\xED\x4B\x9D",
                         "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF",
                         8)
};

#endif
