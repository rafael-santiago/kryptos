#
#                                Copyright (C) 2017 by Rafael Santiago
#
# This is a free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#

include ~/toolsets/gcc/gcc-lib.hsl
include ~/toolsets/clang/clang-lib.hsl

include ~/toolsets/gcc/gcc-app.hsl
include ~/toolsets/clang/clang-app.hsl

include ~/fsutil.hsl

function get_app_toolset() : result type string {
    result (get_toolset_option_data() + "-" + get_language_option_data() + "-app");
}

function get_lib_toolset() : result type string {
    result (get_toolset_option_data() + "-" + get_language_option_data() + "-lib");
}

function check_compiler_language() : result type none {
    if (get_language_option_data() == "cc") {
        hefesto.sys.echo("BUILD ERROR: You cannot compile kryptos with a C++ compiler.\n" +
                         "             But you can use the C compiled code with your C++ project.\n\n");
        hefesto.sys.echo("'?! Blah-blah': Run the standard build command and once it well succeeded, " +
                         "change to the samples directory and run the command:\n\t\t" +
                         "-> 'hefesto [--toolset=gcc|clang] --language=cc --cflags=-fpermissive'. " +
                         "Please do not pee on pants!\n");
        hefesto.sys.exit(1);
    }
}

local function get_language_option_data() : result type string {
    var language_option type list;

    $language_option = hefesto.sys.get_option("language");

    if ($language_option.count() > 0) {
        result $language_option.item(0);
    }

    result "c";
}

local function get_toolset_option_data() : result type string {
    var toolset_option type list;

    $toolset_option = hefesto.sys.get_option("toolset");

    if ($toolset_option.count() > 0) {
        result $toolset_option.item(0);
    }

    if (has_gcc()) {
        result "gcc";
    } else if (has_clang()) {
        result "clang";
    }

    hefesto.sys.echo("BUILD ERROR: You need GCC or Clang well-installed in order to build this software.\n");
    hefesto.project.abort(1);
}

local function has_gcc() : result type int {
    result (runbkcmd("gcc --version") == 0);
}

local function has_clang() : result type int {
    result (runbkcmd("clang --version") == 0);
}

local function runbkcmd(cmd type string) : result type int {
    if (hefesto.sys.os_name() == "windows") {
        $cmd = $cmd + " > nul 2>&1";
    } else {
        $cmd = $cmd + " > /dev/null 2>&1";
    }
    result hefesto.sys.run($cmd);
}

function build_mnemosine() : result type none {
    if (isfile("../lib/mnemosine/lib/libmnemosine.a") == 0) {
        var old_cwd type string;
        $old_cwd = hefesto.sys.pwd();
        if (hefesto.sys.cd("../lib/mnemosine/src")) {
            var exit_code type int;
            var cmdline type string;
            var option type list;
            $cmdline = "hefesto --toolset=" + get_toolset_option_data();
            $option = hefesto.sys.get_option("no-pthread");
            if ($option.count() > 0) {
                $cmdline = $cmdline + " --no-pthread";
            }
            $option = hefesto.sys.get_option("mnemosine-static-heap-size");
            if ($option.count() > 0) {
                $cmdline = $cmdline + " --mnemosine-static-heap-size=" + $option.item(0);
            }
            $exit_code = hefesto.sys.run($cmdline);
            if ($exit_code != 0) {
                hefesto.project.abort($exit_code);
            }
            hefesto.sys.cd($old_cwd);
        } else {
            hefesto.sys.echo("ERROR: Unable to find ../lib/mnemosine/src directory.\n");
            hefesto.project.abort(1);
        }
    }
}
